fn = paste0(perPath, 'perms_', perVar, nIter)
if (!file.exists(fn)) {
print('Generating a new permutation matrix')
# Load t1.csv as example for calculating amount of rows
file_name = paste(inPath, 't1000.csv', sep = '')
tmp <- read.csv(file_name, comment.char = "", sep=";")
L = length(tmp$E1)
# Custom function for data preprocessing
# It is important to apply same process here than in th final analysis,
# in order to have the same dataset
tmp <- processData(tmp)
print("procesado")
# Create exmpty matrix with L rows
iterations = matrix(NA, L, 0)
# Create a secuential vector [1:L] and add to interactions in the first column
# Thus, first run will be without iterations
s = c(1:L)
iterations <- cbind(iterations, s)
# Generate permutations columns within perVar
# if perVar == 0 -> permutate across all random Variables
for (iter in 1:nIter){
if (perVar == '') {
thisIter = sample(s)
iterations <- cbind(iterations, thisIter)
} else {
perVarUn = unique(tmp[perVar])
for (iPerVar in perVarUn){
indIhisIter = s[tmp[perVar] == iPerVar]
thisIter[indIhisIter] = sample(indIhisIter)
}
iterations <- cbind(iterations, thisIter)
}
}
}
perPath
iterations
perPath
write.table(iterations, perPath, sep = ",", row.names = FALSE, col.names = FALSE)
perPath
source(paste0(rPath, '/generateIterMatrix.R'))
source(paste0(rPath, '/lmmElecTime.R'))
source(paste0(rPath, '/lmElecTime.R'))
source(paste0(rPath, '/lmmTimeWindow.R'))
source(paste0(cstPath, '/processData.R'))
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
inPath
iTime
iTime=1
fileName = paste(inPath, 't', iTime, '.csv', sep = '')
print(paste0('Loading file T', iTime))
tmp <- read.csv(fileName, comment.char = "", sep=";")
tmp <- processData(tmp)
out <- list()
indE=1
electrode = paste0('E', indE)
nIter = dim(iterations)[2]
iter=1
[iterations[,iter], ]
tmp[electrode][iterations[,iter], ]
tmp[electrode] <- tmp[electrode][iterations[,iter], ]
length(tmp)
length(tmp$suj_id)
length(iterations)
length(iterations[1,])
length(iterations[,1])
fileName = paste(inPath, 't', iTime=2, '.csv', sep = '')
fileName
tmp <- read.csv(fileName, comment.char = "", sep=";")
tmp <- processData(tmp)
tmp[electrode] <- tmp[electrode][iterations[,iter], ]
length(tmp$suj_id)
dim(iterations)[2]
slopes
fileName
tmp <- read.csv(fileName, comment.char = "", sep=";")
tmp <- processData(tmp)
out <- list()
for (indE in 1:128) {
electrode = paste0('E', indE)
nIter = dim(iterations)[2]
for (iter in 1:nIter){
tmp[electrode] <- tmp[electrode][iterations[,iter], ]
if (perType == 'lm'){
out = lmElecTime(tmp, indE, variables, iter, nIter, out)
} else {
out = lmmElecTime(tmp, indE, variables, iter, nIter, out)
}
}
}
iterations
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
iterations
out <- list()
for (indE in 1:128) {
electrode = paste0('E', indE)
nIter = dim(iterations)[2]
for (iter in 1:nIter){
tmp[electrode] <- tmp[electrode][iterations[,iter], ]
if (perType == 'lm'){
out = lmElecTime(tmp, indE, variables, iter, nIter, out)
} else {
out = lmmElecTime(tmp, indE, variables, iter, nIter, out)
}
}
}
source(paste0(rPath, '/generateIterMatrix.R'))
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
iterations
out <- list()
for (indE in 1:128) {
electrode = paste0('E', indE)
nIter = dim(iterations)[2]
for (iter in 1:nIter){
tmp[electrode] <- tmp[electrode][iterations[,iter], ]
if (perType == 'lm'){
out = lmElecTime(tmp, indE, variables, iter, nIter, out)
} else {
out = lmmElecTime(tmp, indE, variables, iter, nIter, out)
}
}
}
perType
perType = 'lmm'
fileName = paste(inPath, 't', iTime, '.csv', sep = '')
print(paste0('Loading file T', iTime))
tmp <- read.csv(fileName, comment.char = "", sep=";")
# Custom function for data preprocessing
tmp <- processData(tmp)
out <- list()
for (indE in 1:128) {
electrode = paste0('E', indE)
nIter = dim(iterations)[2]
for (iter in 1:nIter){
tmp[electrode] <- tmp[electrode][iterations[,iter], ]
if (perType == 'lm'){
out = lmElecTime(tmp, indE, variables, iter, nIter, out)
} else {
out = lmmElecTime(tmp, indE, variables, iter, nIter, out)
}
}
}
variables = '(freq + palnum + pred) * tipo'
variables = '(freq + palnum + pred) * tipo + (1|suj_id) + (1|pal)'
fileName = paste(inPath, 't', iTime, '.csv', sep = '')
print(paste0('Loading file T', iTime))
tmp <- read.csv(fileName, comment.char = "", sep=";")
# Custom function for data preprocessing
tmp <- processData(tmp)
out <- list()
for (indE in 1:128) {
electrode = paste0('E', indE)
nIter = dim(iterations)[2]
for (iter in 1:nIter){
tmp[electrode] <- tmp[electrode][iterations[,iter], ]
if (perType == 'lm'){
out = lmElecTime(tmp, indE, variables, iter, nIter, out)
} else {
out = lmmElecTime(tmp, indE, variables, iter, nIter, out)
}
}
}
effectsLMM = out$effects
slopes     = out$slopes
t_values   = out$t_values
AIC_mat    = out$AIC_mat
lEf        = length(effectsLMM)
iEf=1
variable = names(effectsLMM[iEf])
variable
lEf
f = paste0(outPath, 'p_', variable, '_T', iTime)
f
write.table(slopes[,,iEf], f, sep = ",", row.names = FALSE, col.names = FALSE)
outPath
outPath = "~/Documentos/Repos/CuBaPeTo/example/LMM/results/"
f = paste0(outPath, 'p_', variable, '_T', iTime)
write.table(slopes[,,iEf], f, sep = ",", row.names = FALSE, col.names = FALSE)
rPath      = ~/Documents/Repos/LMM-CBP//R_functions/
rPath      = '~/Documents/Repos/LMM-CBP//R_functions/'
require(lme4)
source(paste0(rPath, '/generateIterMatrix.R'))
source(paste0(rPath, '/lmmElecTime.R'))
source(paste0(rPath, '/lmElecTime.R'))
source(paste0(rPath, '/lmmTimeWindow.R'))
source(paste0(rPath, '/remef.v0.6.9.R'))
cstPath    = '/home/brunobian/Documents/Repos/corregistro/'
source(paste0(cstPath, '/processData.R'))
variable = 'p_pos:sntType-0.5'
gsub(':','$',variable)
inPath = '/media/brunobian/DATABRUNO/Co-registro_2018/Data/11-edited_forERPs/../csv_tables/t1.csv'
# Load custim function for data processing
source(paste0(cstPath, '/processData.R'))
tStart     = 1
tEnd       = 2
nIter      = 1
inPath     ='/media/brunobian/DATABRUNO/Co-registro_2018/Data/12-edited_forERPs/../csv_test/'
inPath
file_name = paste(inPath, 't1.csv', sep = '')
file_name
inPath
inPath='/media/brunobian/DATABRUNO/Co-registro_2018/Data/12-edited_forERPs/csv_tesis/conICA/'
file_name = paste(inPath, 't1.csv', sep = '')
file_name
read.csv(file_name, quote = "", sep=";",fileEncoding = "UTF-8")
file_name='/media/brunobian/DATABRUNO/Co-registro_2018/Data/12-edited_forERPs/../csv_tesis/conICA/'
# Load t1.csv as example for calculating amount of rows
file_name = paste(inPath, 't1.csv', sep = '')
file_name
# Load t1.csv as example for calculating amount of rows
inPath = '/media/brunobian/DATABRUNO/Co-registro_2018/Data/12-edited_forERPs/../csv_tesis/conICA/'
inPath
file_name = paste(inPath, 't1.csv', sep = '')
file_name
read.csv(file_name, quote = "", sep=";",fileEncoding = "UTF-8")
tmp <- read.csv(file_name, quote = "", sep=";",fileEncoding = "UTF-8")
# Custom function for data preprocessing
# It is important to apply same process here than in th final analysis,
# in order to have the same dataset
tmp <- processData(tmp)
source("/home/brunobian/Documents/Repos/corregistro/Analysis_bb/2020/my_functions/processData.R")
# Custom function for data preprocessing
# It is important to apply same process here than in th final analysis,
# in order to have the same dataset
tmp <- processData(tmp)
L = length(tmp$E1)
print(L)
tStart     = 1
tEnd       = 90
nIter      = 0
inPath     =     '/media/brunobian/DATABRUNO/Co-registro_2018/Data/12-edited_forERPs/../csv_test/'
outPath    = '/media/brunobian/DATABRUNO/Co-registro_2018/Data/LMM/result_R'
tStart     = 1  #as.numeric(args[1])
tEnd       = 90 #as.numeric(args[2])
nIter      = 0  #as.numeric(args[3])
inPath     = '/media/brunobian/DATABRUNO/Co-registro_2018/Data/12-edited_forERPs/../csv_test/' #args[4]
outPath    = '/media/brunobian/DATABRUNO/Co-registro_2018/Data/LMM/result_R' #args[5]
modType    = 'lmm' #args[6]
rPath      = '/media/brunobian/ExtraDrive1/Repos/LMM-CBP//R_functions/' #args[7]
fixEf      = 'freq + pred:sntType + pos:sntType' #args[8]
ranEf      = '(1|suj_id)' #args[9]
perPath    =     '/media/brunobian/DATABRUNO/Co-registro_2018/Data/12-edited_forERPs/../LMM/permutations/' #args[10]
perVar     = 'suj_id' #args[11]
cstPath    = '/home/brunobian/Documents/Repos/corregistro/Analysis_bb/2020/my_functions' #args[12]
total.start <- Sys.time()
# Avoid warnnings
options(warn=-1)
# Load libraries and functions from CuBaPeTo
require(lme4)
source(paste0(rPath, '/generateIterMatrix.R'))
source(paste0(rPath, '/lmmElecTime.R'))
source(paste0(rPath, '/lmElecTime.R'))
source(paste0(rPath, '/lmmTimeWindow.R'))
source(paste0(rPath, '/remef.v0.6.9.R'))
# Load custim function for data processing
source(paste0(cstPath, '/processData.R'))
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
iterations
variables   <- paste0(fixEf, '+', ranEf)
variables
tStart
tEnd
variables
iterations
perType
perType=modeType
perType=modType
inPath
outPath
seq(tStart, tEnd)
iTime =1
time.start <- Sys.time()
# Check if this time CSV file was alredy run
destfile =  paste0(outPath, 'AIC_T', iTime)
destfile
outPath    = '/media/brunobian/DATABRUNO/Co-registro_2018/Data/LMM/result_R/' #args[5]
# Check if this time CSV file was alredy run
destfile =  paste0(outPath, 'AIC_T', iTime)
destfile
file.exists(destfile)
# Load file
fileName = paste(inPath, 't', iTime, '.csv', sep = '')
fileName
print(paste0('Loading file T', iTime))
tmp <- read.csv(fileName, quote = "", sep=";")
iTime=2
time.start <- Sys.time()
# Check if this time CSV file was alredy run
destfile =  paste0(outPath, 'AIC_T', iTime)
file.exists(destfile)
# Load file
fileName = paste(inPath, 't', iTime, '.csv', sep = '')
print(paste0('Loading file T', iTime))
tmp <- read.csv(fileName, quote = "", sep=";")
# Find out the amount of electrodes in DataSet
cols       <- colnames(tmp)
cols
electCols  <- grepl('^E[0-9]+', cols)
electCols
nElect     <- sum(electCols)
nElect
# Custom function for data preprocessing
tmp <- processData(tmp)
paste0(cstPath, '/processData.R')
dataSet=tmp
dataSet <- dataSet[nchar(as.character(dataSet$pal))>2,]
dataSet$pal <- gsub(' +','',dataSet$pal)
dataSet$pal <- gsub('[!¡.,:;?¿"]','',dataSet$pal)
dataSet$pal <- tolower(dataSet$pal)
dataSet$pal <- as.factor(dataSet$pal)
dataSet$suj_id <- as.factor(dataSet$suj_id)
# Delete bad epochs
dataSet <- dataSet[dataSet$filter == 1,] # Elimino los malos trials
# Genero variable dummy para oraicones comunes y proverbios
# dataSet$tipo_Dummy_common  = dataSet$tipo
# dataSet$tipo_Dummy_common[dataSet$tipo_Dummy_common == 0] = NA
# dataSet$tipo_Dummy_proverb = abs(1 - dataSet$tipo)
# dataSet$tipo_Dummy_proverb[dataSet$tipo_Dummy_proverb == 0] = NA
#
dataSet$sntType <- as.factor(dataSet$sntType-.5)
dataSet$sntTypePrePost <- as.factor(dataSet$sntTypePrePost)
# Transformo y centro variables
dataSet$freq   <- log(dataSet$freq+1)
dataSet$fixDur <- log(dataSet$fixDur)
dataSet$lngth  <- 1/(dataSet$lngth)
dataSet$freq    <- scale(dataSet$freq,   center = TRUE, scale = F)
dataSet$pred    <- scale(dataSet$pred,   center = TRUE, scale = F)
dataSet$pos     <- scale(dataSet$pos,    center = TRUE, scale = F)
dataSet$lngth   <- scale(dataSet$lngth,  center = TRUE, scale = F)
dataSet$fixDur  <- scale(dataSet$fixDur, center = TRUE, scale = F)
#summary(dataSet)
# Uso las dummy de arriba para generar las pred de prov y oraciones comunes por separado
# De esta forma me ahorro el contraste y puedo ver N400 de ambos efectos po sep.
# dataSet$pred_common  <- dataSet$pred * dataSet$tipo_Dummy_common
# dataSet$pred_proverb <- dataSet$pred * dataSet$tipo_Dummy_proverb
#
return(dataSet)
# Load custim function for data processing
source(paste0(cstPath, '/processData.R'))
# Custom function for data preprocessing
tmp <- processData(tmp)
# Iterate over electrodes
out <- list()
indE=1
electrode = paste0('E', indE)
#print(electrode)
nIter = dim(iterations)[2]
nIter
iter=1
iter
tmp['permuted'] <- tmp[electrode][iterations[,iter], ]
nIter
#print(electrode)
nIter = dim(iterations)[2]
nIter
iterations
nIter
iter
iterations
iterations[,iter]
tmp[electrode][iterations[,iter], ]
tmp['permuted'] <- tmp[electrode][iterations[,iter], ]
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
inPath
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
source(paste0(rPath, '/generateIterMatrix.R'))
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
fileName = paste(inPath, 't', iTime, '.csv', sep = '')
print(paste0('Loading file T', iTime))
tmp <- read.csv(fileName, quote = "", sep=";")
# Load t1.csv as example for calculating amount of rows
fileName = paste(inPath, 't2.csv', sep = '')
print(paste0('from file T', iTime))
tmp <- read.csv(fileName, quote = "", sep=";")
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
View(iterations)
nIter
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
iterations <- []
iterations <- c()
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
source(paste0(rPath, '/generateIterMatrix.R'))
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
fileName = paste(inPath, 't', iTime, '.csv', sep = '')
print(paste0('Loading file T', iTime))
tmp <- read.csv(fileName, quote = "", sep=";")
# Find out the amount of electrodes in DataSet
cols       <- colnames(tmp)
electCols  <- grepl('^E[0-9]+', cols)
nElect     <- sum(electCols)
# Custom function for data preprocessing
tmp <- processData(tmp)
# Iterate over electrodes
out <- list()
indE
electrode = paste0('E', indE)
#print(electrode)
nIter = dim(iterations)[2]
iter
tmp['permuted'] <- tmp[electrode][iterations[,iter], ]
dataSet=tmp
indE
variables
iter
nIter
out
electrode = paste0('E', indE)
model = paste0(electrode,' ~ ' , variables)
model
electrode = paste0('E', indE)
model = paste0('permuted ~ ' , variables)
thisLmm <- lmer(model , data = dataSet, REML = FALSE)
thisLmm
fileName
cstPath
source(paste0(cstPath, '/processData.R'))
# Generate new permutation matrix or load an existing one
iterations <- generateIterMatrix(nIter, perVar, inPath, perPath)
fileName
tmp <- read.csv(fileName, quote = "", sep=";")
head(tmp)
fileName
inPath='/media/brunobian/DATABRUNO/Co-registro_2018/Data/csv_tesis_center_R/conICA/'
fileName
tmp <- read.csv(fileName, quote = "", sep=";")
head(tmp)
# Load t1.csv as example for calculating amount of rows
fileName = paste(inPath, 't2.csv', sep = '')
tmp <- read.csv(fileName, quote = "", sep=";")
head(tmp)
dataSet <- tmp
dataSet$sntTypePrePost <- as.factor(dataSet$sntTypePrePost)
dataSet$pal <- gsub(' +','',dataSet$pal)
dataSet$pal <- gsub('[!¡.,:;?¿"]','',dataSet$pal)
dataSet$pal <- tolower(dataSet$pal)
dataSet$pal <- as.factor(dataSet$pal)
dataSet$suj_id <- as.factor(dataSet$suj_id)
# Genero variable dummy para oraicones comunes y proverbios
# dataSet$tipo_Dummy_common  = dataSet$tipo
# dataSet$tipo_Dummy_common[dataSet$tipo_Dummy_common == 0] = NA
# dataSet$tipo_Dummy_proverb = abs(1 - dataSet$tipo)
# dataSet$tipo_Dummy_proverb[dataSet$tipo_Dummy_proverb == 0] = NA
#
dataSet$sntType <- as.factor(dataSet$sntType-.5)
dataSet$sntTypePrePost <- as.factor(dataSet$sntTypePrePost)
dataSet$freq    <- scale(dataSet$freq,   center = TRUE, scale = F)
dataSet$pred    <- scale(dataSet$pred,   center = TRUE, scale = F)
dataSet$pos     <- scale(dataSet$pos,    center = TRUE, scale = F)
dataSet$lngth   <- scale(dataSet$lngth,  center = TRUE, scale = F)
dataSet$fixDur  <- scale(dataSet$fixDur, center = TRUE, scale = F)
cfgPath = '/media/brunobian/DATABRUNO/Co-registro_2018/Data/LMM/cfg.csv'
read.csv(cfgPath)
read.csv(cfgPath,header=FALSE)
df=read.csv(cfgPath,header=c("var","value"))
df=read.csv(cfgPath,header=FALASE, col.names=c("var","value"))
df=read.csv(cfgPath,header=FALSE, col.names=c("var","value"))
df
eval(df$var[1] = df$value[1])
eval(parte(text="df$var[1] = df$value[1]"))
eval(parse(text="df$var[1] = df$value[1]"))
df$var[1]
df$var
df$var[1]
df$var[2]
df$value[2]
df
df=read.csv(cfgPath,header=FALSE, col.names=c("var","value"))
df
df$var[1]
eval(parse(text="df$var[1] = df$value[1]"))
eval
df
df=read.csv(cfgPath,header=FALSE, col.names=c("var","value"))
assign(df$var[1], df$value[1])
df$var[1]
str(df$var[1])
df$var[1].value()
df$var[1,]
df[1,]$var
assign(df$var[1], df$value[1])
df$var[1]
df$var == "nIter"
df$var
df=read.csv(cfgPath,header=FALSE, col.names=c("var","value"))
df
df$var == "nIter"
df$value[df$var == "nIter"]
as.numeric(df$value[df$var == "nIter"])
df$var
inPath     = df$value[df$var == "inPath"]
inPath
df=read.csv(cfgPath,header=FALSE, col.names=c("var","value"),as.is= "character")
df=read.csv(cfgPath,header=FALSE, col.names=c("var","value"),as.is=c("character","character") )
df=read.csv(cfgPath,header=FALSE, col.names=c("var","value"),colClasses = "character")
df
nIter      = as.numeric(df$value[df$var == "nIter"])
nIter
inPath     = df$value[df$var == "inPath"]
inPath
assign(df$var[1], df$value[1])
nIter
for (i in 1:nrow(df)){assign(df$var[i], df$value[i])}
i
